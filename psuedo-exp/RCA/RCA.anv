channel addCh
{
    req : left
    {
        a : bv[1];
        b : bv[1];
        cr : bv[1];
    }@0-req;
    res : right
    {
        sum : bv[1];
        cout : bv[1];
    }@0-req;
}

channel RCAch
{
    req : left
    {
        a : bv[4];
        b : bv[4];
        cr : bv[1];
    }@0-req;
    res : right
    {
        sum : bv[4];
        cout : bv[1];
    }@0-req;
}

proc full_adder(ch : left addCh)
{
    loop {
        let r = recv ch.req in
        r => {
            let s=(r.a^r.b^r.cr) in
            let c=(r.a&r.b | r.b&r.cr | r.cr&r.a) in
            send ch.res({sum = s; cout = c});
        }
    }
}


proc RCA(ch : left RCAch)
{
    acquire addCh(ch0):right;
    acquire addCh(ch1):right;
    acquire addCh(ch2):right;
    acquire addCh(ch3):right;
    spawn full_adder(ch0:left);
    spawn full_adder(ch1:left);
    spawn full_adder(ch2:left);
    spawn full_adder(ch3:left);
    loop {
        let r = recv ch.req in
        r =>

        send ch0.req({a = r.a[0]; b = r.b[0]; cr = r.cr}) =>
        let r0 = recv ch0.res in
        r0 =>

        send ch1.req({a = r.a[1]; b = r.b[1]; cr = r0.cout}) =>
        let r1 = recv ch1.res in
        r1 =>
            
        send ch2.req({a = r.a[2]; b = r.b[2]; cr = r1.cout}) =>
        let r2 = recv ch2.res in
        r2 =>
            
        send ch3.req({a = r.a[3]; b = r.b[3]; cr = r2.cout}) =>
        let r3 = recv ch3.res in
        r3 =>
            
        send ch.res({sum = {r3.sum, r2.sum, r1.sum, r0.sum}; cout = r3.cout});
    }
}