type mux_req = {
    sel: logic;
    a: logic;
    b: logic
}

chan mux_ifc = {
    left req : (mux_req@#0-#1) @#1 - @#1,
    right resp : (logic@#0-#1) @req - @req
}

proc mux_impl (i: left mux_ifc) =
    cycle then
    recv req = i::req then
    let r = if req.sel then req.b else req.a in
    send i::resp (r) then ()

proc mux() =
    chan foreign mux_l -- mux_r : mux_ifc
    spawn mux_impl (mux_l)
    cycle then
    send mux_r::req (mux_req::{sel=1'b0; a=1'b0; b=1'b1}) then
    recv r = mux_r::resp then
    dprint "Result 1 = %d" (r);
    cycle then
    send mux_r::req (mux_req::{sel=1'b1; a=1'b0; b=1'b1}) then
    recv r = mux_r::resp then
    dprint "Result 2 = %d" (r);
    cycle then
    send mux_r::req (mux_req::{sel=1'b1; a=1'b1; b=1'b0}) then
    recv r = mux_r::resp then
    dprint "Result 3 = %d" (r);
    dfinish
