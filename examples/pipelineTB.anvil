chan proc_main = {
    left req : (logic[8]@#1),
    right res : (logic[8]@#1)
}

proc PipelineProcessor(ch : left proc_main) =
    reg IF_ID_instruction:logic[8]
    reg ID_EX_operand_a:logic[8]
    reg ID_EX_operand_b:logic[8]
    reg ID_EX_opcode:logic[2]
    reg EX_MEM_result:logic[8]
    reg MEM_WB_result:logic[8]
    reg cycle_counter:logic[4]

    loop {
        set cycle_counter := !cycle_counter + 4'b0001;
        cycle 1
    }

    loop {
        
        let instruction = recv ch::req in
        instruction=>
        set IF_ID_instruction := instruction;
        cycle 1
    }

    loop {
        set ID_EX_operand_a := {5'b00000, !IF_ID_instruction[5+:3]};
        set ID_EX_operand_b := {5'b00000, !IF_ID_instruction[2+:3]};
        set ID_EX_opcode := !IF_ID_instruction[0+:2];
        cycle 1
    }

    loop {
        (if (!ID_EX_opcode == 2'b00) then (
            set EX_MEM_result := !ID_EX_operand_a + !ID_EX_operand_b
        ) else if (!ID_EX_opcode == 2'b01) then (
            set EX_MEM_result := !ID_EX_operand_a - !ID_EX_operand_b
        ) else if (!ID_EX_opcode == 2'b10) then (
            set EX_MEM_result := !ID_EX_operand_a & !ID_EX_operand_b
        ) else if (!ID_EX_opcode == 2'b11) then (
            set EX_MEM_result := !ID_EX_operand_a | !ID_EX_operand_b
        ) else (
            set EX_MEM_result := 8'b0
        ));
        cycle 1
    }

    loop {
        send ch::res(!EX_MEM_result)=>
        cycle 1
    }


proc pipelineTB () =
    chan proc_input -- proc_output : proc_main
    spawn PipelineProcessor(proc_input)
    reg counter: logic[4]
    reg instruction: logic[8]
    reg cycle_counter: logic[4]
    reg operand_a: logic[3]
    reg operand_b: logic[3]
    reg opcode: logic[2]

    loop {
        set cycle_counter := !cycle_counter + 4'b0001;
        cycle 1
    }
    loop {
        set operand_a := !operand_a + 3'b001;
        set operand_b := !operand_b + 3'b001;
        cycle 1
    }

    loop {
        set instruction := {!operand_a, !operand_b, !opcode};
        cycle 1
    }
    loop {
        dprint "(Top) Sent instruction (%d) in cycle: %d" (!instruction, !cycle_counter);
        send proc_input::req(!instruction)=>
        cycle 1
    }    

    loop {
        let result = recv proc_output::res in
        result=>
        dprint "(Top) Recieved Result (%d) on cycle: %d" (result, !cycle_counter);
        cycle 1
    }
