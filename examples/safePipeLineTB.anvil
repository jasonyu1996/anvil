type value_8bit = logic[8]
type value_4bit = logic[4]
type value_3bit = logic[3]
type value_5bit = logic[5]
type dequeue_resp =
{
    data : value_8bit;
    valid : logic[1]
}
chan enqueue_ch = {
    left enqueue_req: (value_8bit@enqueue_res),
    right enqueue_res: (logic@enqueue_req)
}
chan dequeue_ch = {
    left dequeue_req: (logic@dequeue_res),
    right dequeue_res: (value_8bit@#1)
}

proc Queue_8bit(en_ch : left enqueue_ch, de_ch : left dequeue_ch) =
    reg queue : value_8bit[8]
    reg head : value_3bit
    reg tail : value_3bit
    reg enqueue_resp : logic[1]
    reg d_resp : dequeue_resp
    reg full : logic[1]
    reg not_full : logic[1]

    loop {
        if ((*head == *tail) && (*full == 1'b0)) then
            dprint "Cant Accept Dequeue Request: Queue Empty" ()
        else
        (
            let d_req = recv de_ch.dequeue_req in
            d_req=>
            send de_ch.dequeue_res(*queue[*tail])=>
            set tail := *tail + 3'b001;
            (if(*full) then
                set not_full := 1'b1
            else
                set not_full := 1'b0)
        )=>
        cycle 1
    }

    loop {
        let data = recv en_ch.enqueue_req in
        data=>
        (
            if((*full == 1'b0) || (*not_full == 1'b1)) then
            (
                set queue[*head] := data;
                set enqueue_resp := 1'b1
            )
            else
            (
                set enqueue_resp := 1'b0
            );
        if ((*head + 3'b001) == *tail) then
            set full := 1'b1
        else
        (
            set full := 1'b0
        ))=>


        send en_ch.enqueue_res(*enqueue_resp)=>
        set head := *head + {2'b00, *enqueue_resp};
        cycle 1
    }

proc Processor(ins_ch: left ins_ch) =
    reg IF_ID_instruction:logic[8]
    reg ID_EX_operand_a:logic[8]
    reg ID_EX_operand_b:logic[8]
    reg ID_EX_opcode:logic[2]
    reg EX_MEM_result:logic[8]
    reg MEM_WB_result:logic[8]
    reg cycle_counter:logic[4]
    chan en_IF_ID_le -- en_IF_ID_ri : enqueue_ch
    chan de_IF_ID_le -- de_IF_ID_ri : dequeue_ch
    chan en_ID_A_le -- en_ID_A_ri : enqueue_ch
    chan de_ID_A_le -- de_ID_A_ri : dequeue_ch
    chan en_ID_B_le -- en_ID_B_ri : enqueue_ch
    chan de_ID_B_le -- de_ID_B_ri : dequeue_ch
    chan en_ID_OP_le -- en_ID_OP_ri : enqueue_ch
    chan de_ID_OP_le -- de_ID_OP_ri : dequeue_ch
    chan en_EX_MEM_le -- en_EX_MEM_ri : enqueue_ch
    chan de_EX_MEM_le -- de_EX_MEM_ri : dequeue_ch
    chan en_MEM_WB_le -- en_MEM_WB_ri : enqueue_ch
    chan de_MEM_WB_le -- de_MEM_WB_ri : dequeue_ch
    spawn Queue_8bit(en_IF_ID_le, de_IF_ID_le)
    spawn Queue_8bit(en_ID_A_le, de_ID_A_le)
    spawn Queue_8bit(en_ID_B_le, de_ID_B_le)
    spawn Queue_8bit(en_ID_OP_le, de_ID_OP_le)
    spawn Queue_8bit(en_EX_MEM_le, de_EX_MEM_le)
    spawn Queue_8bit(en_MEM_WB_le, de_MEM_WB_le)

    loop {
        let instruction = recv ins_ch.req in
        instruction=>
        send en_IF_ID_le.enqueue_req(instruction)=>
        cycle 1
    }

    loop {
        let instruction = recv de_IF_ID_le.dequeue_req in
        instruction=>
        (send en_ID_OP_le.enqueue_req({6'b000000, instruction[0+:2]});
        send en_ID_A_le.enqueue_req({5'b00000, instruction[2+:3]});
        send en_ID_B_le.enqueue_req({5'b00000, instruction[5+:3]}))=>
        cycle 1
    }
    loop{
        let opcode = recv de_ID_OP_le.dequeue_req in
        let operand_a = recv de_ID_A_le.dequeue_req in
        let operand_b = recv de_ID_B_le.dequeue_req in
        opcode=>
        operand_a=>
        operand_b=>
        (
            if(*opcode == 2'b00) then
                send en_EX_MEM_le.enqueue_req(operand_a + operand_b)
            else if(*opcode == 2'b01) then
                send en_EX_MEM_le.enqueue_req(operand_a - operand_b)
            else if(*opcode == 2'b10) then
                send en_EX_MEM_le.enqueue_req(operand_a & operand_b)
            else if(*opcode == 2'b11) then
                send en_EX_MEM_le.enqueue_req(operand_a | operand_b)
        )=>
        cycle 1
    }

    loop{
        let result = recv de_EX_MEM_le.dequeue_req in
        result=>
        send en_MEM_WB_le.enqueue_req(result)=>
        cycle 1
    }
