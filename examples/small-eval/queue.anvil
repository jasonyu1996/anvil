type value_8bit = logic[8];
type value_4bit = logic[4];
type value_3bit = logic[3];
type value_10bit = logic[10];
struct dequeue_resp
{
    data : value_8bit,
    valid : logic[1]
}
chan enqueue_ch {
    left enqueue_req: (value_8bit@enqueue_res),
    right enqueue_res: (logic@enqueue_req)
}
chan dequeue_ch {
    left dequeue_req: (logic@dequeue_res),
    right dequeue_res: (value_8bit@#1)
}

proc Queue_8bit(en_ch : left enqueue_ch, de_ch : left dequeue_ch) {
    reg queue : value_8bit[8];
    reg head : value_3bit;
    reg tail : value_3bit;
    reg enqueue_resp : logic[1];
    reg d_resp : dequeue_resp;
    reg full : logic[1];

    loop {
        if ((*head == *tail) && (*full == 1'b0)) {
            ()
        } else {
            let d_req = recv de_ch.dequeue_req >>
            send de_ch.dequeue_res(*queue[*tail]) >>
            set tail := *tail + 3'b001
        } >>
        cycle 1
    }

    loop {
        if ((*head == *tail) && (*full == 1'b1)) {
            ()
        } else {
            let data = recv en_ch.enqueue_req >>
            set queue[*head] := data;
            set enqueue_resp := 1'b1;
            if ((*head + 3'b001) == *tail) {
                set full := 1'b1
            }
            else {
                set full := 1'b0
            } >>
            set head := *head + 3'b001;
            send en_ch.enqueue_res(*enqueue_resp)
        } >>
        cycle 1
    }
}

proc queue () {
    chan enqueue_in -- enqueue_out : enqueue_ch;
    chan dequeue_in -- dequeue_out : dequeue_ch;
    spawn Queue_8bit(enqueue_in, dequeue_in);
    reg data : value_8bit;
    reg cycle_counter : value_10bit;
    reg counter : value_4bit;
    loop {
        set cycle_counter := *cycle_counter + 10'b0000000001
    }

    loop {
            send enqueue_out.enqueue_req(8'd1) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1 >>
            send enqueue_out.enqueue_req(8'd2) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1 >>
            send enqueue_out.enqueue_req(8'd3) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1 >>
            send enqueue_out.enqueue_req(8'd4) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1 >>
            send enqueue_out.enqueue_req(8'd5) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1 >>
            send enqueue_out.enqueue_req(8'd6) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1 >>
            send enqueue_out.enqueue_req(8'd7) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1 >>
            send enqueue_out.enqueue_req(8'd8) >>
            let _ = recv enqueue_out.enqueue_res >>
            cycle 1
    }

    loop {
        send dequeue_out.dequeue_req(1'b1) >>
        let _ = recv dequeue_out.dequeue_res >>
        cycle 20
    }
}