type value_8bit = logic[8]
type value_4bit = logic[4]
type value_3bit = logic[3]
type value_5bit = logic[5]
type dequeue_resp = 
{
    data : value_8bit;
    valid : logic[1]
}
chan queue_ch = {
    left dequeue_req: (logic@dequeue_res),
    left enqueue_req: (value_8bit@enqueue_res),
    right dequeue_res: (value_8bit@#1),
    right enqueue_res: (logic@enqueue_req)
}

proc Queue_8bit(ch : left queue_ch) =
    reg queue : value_8bit[8]
    reg head : value_3bit
    reg tail : value_3bit
    reg enqueue_resp : logic[1]
    reg d_resp : dequeue_resp
    reg full : logic[1]
    reg not_full : logic[1]

    loop {
        let d_req = recv ch::dequeue_req in
        d_req=>
        if ((!head == !tail) && (!full == 1'b0)) then
            dprint "Queue Empty" ()
        else
        (
            send ch::dequeue_res(!queue[!tail])=>
            set tail := !tail + 3'b001;
            (if(!full) then
                set not_full := 1'b1
            else
                set not_full := 1'b0)
        );
        cycle 1
    }

    loop {
        let data = recv ch::enqueue_req in
        data=>
        (   
            if((!full == 1'b0) || (!not_full == 1'b1)) then
            (
                set queue[!head] := data;
                set enqueue_resp := 1'b1
            )
            else
            (
                set enqueue_resp := 1'b0
            );
        if ((!head + 3'b001) == !tail) then
            set full := 1'b1
        else
        (
            set full := 1'b0
        ))=>

        
        send ch::enqueue_res(!enqueue_resp)=>
        set head := !head + {2'b00, !enqueue_resp};
        cycle 1
    }

proc queue () =
    chan queue_input -- queue_output : queue_ch
    spawn Queue_8bit(queue_input)
    reg data : value_8bit
    reg cycle_counter : value_5bit
    reg counter : value_4bit
    loop {
        set cycle_counter := !cycle_counter + 5'b00001;
        cycle 1
    }
    loop {
        (if (!counter == 4'b0000) then
            set data := 8'b00000001
        else
            if (!counter == 4'b0001) then
                set data := 8'b00000010
            else
                if (!counter == 4'b0010) then
                    set data := 8'b00000011
                else
                    if (!counter == 4'b0011) then
                        set data := 8'b00000100
                    else
                        if (!counter == 4'b0100) then
                            set data := 8'b00000101
                        else
                            if (!counter == 4'b0101) then
                                set data := 8'b00000110
                            else
                                if (!counter == 4'b0110) then
                                    set data := 8'b00000111
                                else
                                    if (!counter == 4'b0111) then
                                        set data := 8'b00001000
                                    else
                                        if (!counter == 4'b1000) then
                                            set data := 8'b0000000
                                        else
                                            if (!counter == 4'b1001) then
                                                set data := 8'b00000000
                                            else
                                                if (!counter == 4'b1010) then
                                                    set data := 8'b00000000
                                                else
                                                    if (!counter == 4'b1011) then
                                                        set data := 8'b00001001
                                                    else
                                                        if (!counter == 4'b1100) then
                                                            set data := 8'b00001010
                                                        else
                                                            if (!counter == 4'b1101) then
                                                                set data := 8'b00001011
                                                            else
                                                                if (!counter == 4'b1110) then
                                                                    set data := 8'b00001100
                                                                else
                                                                    if (!counter == 4'b1111) then
                                                                        dfinish
                                                                    else
                                                                        dfinish);cycle 1=>
            if ((!counter< 4'b1000) || (!counter> 4'b1011)) then
            (  
                send queue_input::enqueue_req(!data)=>
                dprint "Enqueuing %d in cycle %d" (!data, !cycle_counter);
                let x = recv queue_output::enqueue_res in
                x=>
                dprint "Enqueued %d in cycle %d" (!data, !cycle_counter)
            )
            else
            (
                send queue_input::dequeue_req(1'b1)=>
                dprint "Dequeuing in cycle %d" (!cycle_counter);
                let x = recv queue_output::dequeue_res in
                x=>               
                dprint "Dequeue Output %d in cycle %d" (x, !cycle_counter)
            )=>
        set counter := !counter + 4'b0001;
        cycle 1
                                                                        
    }
