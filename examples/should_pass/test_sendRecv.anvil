type value_4bit = logic[4]
chan ch =
{
    left req: (logic@req),
    right res: (logic@res)
}

proc Buffer(ch: left ch) =
    reg cycle_counter:value_4bit
    loop{
        set cycle_counter := !cycle_counter + 4'b0001
    }
    loop{
        let x = recv ch::req in
        x=>
        (
            dprint "[P_B]Received in cycle %d" (!cycle_counter)
        )=>
        send ch::res(1'b1)=>
        dprint "[P_B] Output Done in cycle %d" (!cycle_counter)
    }

proc test_sendRecv() =
    chan ch_in -- ch_out : ch
    spawn Buffer(ch_in)
    reg cycle_counter:value_4bit
    loop{
        set cycle_counter := !cycle_counter + 4'b0001
    }
    loop{
        dprint "[P_A]Sent in cycle %d" (!cycle_counter);
        send ch_out::req(1'b1)=>
        dprint "[P_A]Sent Complete in cycle %d" (!cycle_counter)
    }

    loop{
        let y = recv ch_out::res in
        y=> 
        dprint "[P_A]Received in cycle %d" (!cycle_counter)
    }
