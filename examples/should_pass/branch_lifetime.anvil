struct address_data_pair
{
    addr : logic[8],
    data : logic[8]
}

chan memory_ch {
    left read_req : (logic[8]@#1) @#0~2 - @dyn,
    right read_resp : (logic[8]@read_req) @#read_req+1 - @#read_req+1,
    left write_req :  (address_data_pair@#1),
    right write_resp : (logic[1]@#1) @#write_req+1 - @#write_req+1
}

type byte = logic[8];

proc memory_safe(endp: left memory_ch) {
    reg mem : byte[256];
    reg rd_data : byte;
    loop {

            let addr = recv endp.read_req >>
            set rd_data := *mem[addr];
            cycle 1 >>
            send endp.read_resp(*rd_data) >>
            cycle 1
    }

    loop {
        let addr_data = recv endp.write_req>>
        set mem[addr_data.addr] := addr_data.data >>
        send endp.write_resp(1)
    }
}

func encrypt(data,key){
    let temp = data^ key;
    #{temp[0],temp[1],temp[2],temp[3],temp[4],temp[5],temp[6],temp[7]}
}

func decrypt(data,key){
    let rev_data = #{data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]};
    let temp = rev_data ^ key;
    temp
}

proc top(){
    chan le_mem -- ri_mem : memory_ch;
    spawn memory_safe(le_mem);
    reg local_mem : byte[256];
    reg read_address : byte;
    reg write_address : byte;
    reg write_complete : logic;
    loop{
        generate (i : 0,255,1) {
            set local_mem[i] := 255-i
        }
    }

    loop {
        let key = 8'b11101001;
        send ri_mem.write_req(address_data_pair::{addr=*write_address;data=(call encrypt(*local_mem[*write_address],key))}) >>
        cycle 1 >>
        let _ = recv ri_mem.write_resp >>
        set write_address := *write_address + 1;
        if(*write_address == 8'd255){
            set write_complete := 1
        }
        else {cycle 1}
    }
    loop{
        if(*write_complete == 1'd1){
                send ri_mem.read_req(*read_address) >>
                cycle 1 >>
                let data = recv ri_mem.read_resp >>
                let key = 8'b11101001;
                let decrypt_data = call decrypt(data,key)>>
                if (*local_mem[*read_address] == decrypt_data){
                    dprint "Data (%b) Matched for address: %d" (decrypt_data,*read_address)
                }
                else{
                    dprint "Data (%b) Mismatched for address: %d" (decrypt_data,*read_address)
                };
                if(*read_address == 8'd255){
                    dfinish
                };
                set read_address := *read_address + 1

        }
        else {cycle 1}
    }
}
